param( 
        [string] $remoteHost = "webserver", 
        [int] $port = 1433
        , 
        [switch] $UseSSL, 
        [string] $inputObject, 
        [int] $commandDelay = 100 
     )
[string] $output = ""

## Store the input into an array that we can scan over. If there was no input, 
## then we will be in interactive mode. 
$currentInput = $inputObject 
if(-not $currentInput) 
{ 
    $SCRIPT:currentInput = @($input) 
} 
$scriptedMode = [bool] $currentInput
function PushToTcpPort
{
 param ([Byte[]] $bytearray, [String] $ipaddress, [Int32] $port)
 $tcpclient = new-object System.Net.Sockets.TcpClient($ipaddress, $port) -ErrorAction "SilentlyContinue"
 trap { "Failed to connect to $ipaddress`:$port" ; return }
 $networkstream = $tcpclient.getstream()
 #write(payload,starting offset,number of bytes to send)
 $networkstream.write($bytearray,0,$bytearray.length)
 $networkstream.close(1) #Wait 1 second before closing TCP session.
 $tcpclient.close()
}

function Main 
{ 
    ## Open the socket, and connect to the computer on the specified port 
    write-host "Connecting to $remoteHost on port $port" 

    trap { Write-Error "Could not connect to remote computer: $_"; exit } 
    $socket = new-object System.Net.Sockets.TcpClient($remoteHost, $port)

    $stream = $socket.GetStream() 
    
    $writer = new-object System.IO.StreamWriter $stream
    #0x12,0x01,0x00,0x2F,0x00,0x00,0x01,0x00,0x00,0x00,0x1A,0x00,0x06,0x01,0x00,0x20,0x00,0x01,0x02,0x00,0x21,0x00,0x01,0x03,0x00,0x22,0x00,0x04,0x04,0x00,0x26,0x00,0x01,0xFF #sample packet from doc doesn't work??
    #0x12,0x01,0x00,0x58,0x00,0x00,0x01,0x00,0x00,0x00,0x1f,0x00,0x06,0x01,0x00,0x25,0x00,0x01,0x02,0x00,0x26,0x00,0x01,0x03,0x00,0x27,0x00,0x04,0x04,0x00,0x2b,0x00,0x01,0x05,0x00,0x2c,0x00,0x24,0xff
    #0x12,0x01,0x00,0x58,0x00,0x00,0x01,0x00,0x00,0x00,0x1f,0x00,0x06,0x01,0x00,0x25,0x00,0x01,0x02,0x00,0x26,0x00,0x01,0x03,0x00,0x27,0x00,0x04,0x04,0x00,0x2b,0x00,0x01,0x05,0x00,0x2c,0x00,0x24,0xff,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x00,0x29,0xbd,0xd6,0xf5,0xa5,0x27,0xf3,0x4d,0x82,0xe4,0xf2,0xf2,0xb2,0xdb,0x26,0x5f,0x88,0x8d,0x5b,0x5e,0x0d,0xfc,0x3b,0x4b,0x93,0x48,0x27,0x9c,0xb0,0x1b,0x29,0x33,0x01,0x00,0x00,0x00
    [Byte[]]$command = 0x12,0x01,0x00,0x9d,0x00,0x00,0x00,0x00,0x16,0x03,0x01,0x00,0x90,0x01,0x00,0x00,0x8c,0x03,0x01,0x51,0x3c,0x32,0x2f,0xa9,0xd2,0xb2,0xe5,0xcd,0x90,0x06,0xa6,0xe9,0x5c,0xa3,0x70,0x03,0xf6,0x28,0x65,0x76,0x53,0x8f,0xfd,0xb8,0x1e,0x1c,0xb4,0x79,0xbe,0x83,0xff,0x20,0x33,0x49,0x00,0x00,0x5d,0x9a,0x40,0xb0,0x4d,0x94,0x02,0xa0,0xff,0x01,0x9a,0xbe,0x66,0x38,0x3d,0xba,0x6d,0x55,0xa2,0xb7,0xbd,0x3e,0x93,0x53,0x3b,0x47,0x12,0x10,0x00,0x18,0x00,0x2f,0x00,0x35,0x00,0x05,0x00,0x0a,0xc0,0x13,0xc0,0x14,0xc0,0x09,0xc0,0x0a,0x00,0x32,0x00,0x38,0x00,0x13,0x00,0x04,0x01,0x00,0x00,0x2b,0xff,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x0e,0x00,0x0c,0x00,0x00,0x09,0x77,0x65,0x62,0x73,0x65,0x72,0x76,0x65,0x72,0x00,0x0a,0x00,0x06,0x00,0x04,0x00,0x17,0x00,0x18,0x00,0x0b,0x00,0x02,0x01,0x00,0x00,0x23,0x00,0x00
    
    
    ## Otherwise, Write their command to the remote host 
    #$command

    $flushedtoport = $false

    while($true) 
    { 
        if (!$flushedtoport)
        {
            $writer.Write($command,0,$command.length)
            $writer.Flush()
            $flushedtoport = $true
        }

        ## Receive the output that has buffered so far 
        $SCRIPT:output += GetOutput
        break
    }

    ## Close the streams 
    $writer.Close() 
    $stream.Close()

    $output 
}

## Read output from a remote host 
function GetOutput 
{ 
    ## Create a buffer to receive the response 
    $buffer = new-object System.Byte[] 1024 
    $encoding = new-object System.Text.AsciiEncoding

    $outputBuffer = "" 
    $foundMore = $false

    ## Read all the data available from the stream, writing it to the 
    ## output buffer when done. 
    do 
    { 
        ## Allow data to buffer for a bit 
        start-sleep -m 1000

        ## Read what data is available 
        $foundmore = $false 
        $stream.ReadTimeout = 1000

        do 
        { 
            try 
            { 
                $read = $stream.Read($buffer, 0, 1024)
                Write-Host $read.length
                if($read -gt 0) 
                { 
                    $foundmore = $true 
                    $outputBuffer += ($encoding.GetString($buffer, 0, $read))
                    Write-Host "found more"
                } 
            } catch { $foundMore = $false; $read = 0;Write-Host "error reading stream" } 
        } while($read -gt 0) 
    } while($foundmore)

    $outputBuffer 
}

. Main